// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.newfeature.validateImages()
    storyboard.newfeature.validateViewControllers()
    storyboard.message.validateImages()
    storyboard.message.validateViewControllers()
    storyboard.profile.validateImages()
    storyboard.profile.validateViewControllers()
    storyboard.null.validateImages()
    storyboard.null.validateViewControllers()
    storyboard.discover.validateImages()
    storyboard.discover.validateViewControllers()
    storyboard.oAuth.validateImages()
    storyboard.oAuth.validateViewControllers()
    storyboard.qRCode.validateImages()
    storyboard.qRCode.validateViewControllers()
    storyboard.welcome.validateImages()
    storyboard.welcome.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
    storyboard.popover.validateImages()
    storyboard.popover.validateViewControllers()
    storyboard.home.validateImages()
    storyboard.home.validateViewControllers()
  }
  
  struct file {
    static var mainVCSettingsJson: NSURL? { return _R.hostingBundle?.URLForResource("MainVCSettings", withExtension: "json") }
  }
  
  struct font {
    
  }
  
  struct image {
    static var ad_background: UIImage? { return UIImage(named: "ad_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var avatar_default: UIImage? { return UIImage(named: "avatar_default", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var avatar_default_small: UIImage? { return UIImage(named: "avatar_default_small", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var avatar_enterprise_vip: UIImage? { return UIImage(named: "avatar_enterprise_vip", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var avatar_grassroot: UIImage? { return UIImage(named: "avatar_grassroot", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var avatar_vgirl: UIImage? { return UIImage(named: "avatar_vgirl", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var avatar_vip: UIImage? { return UIImage(named: "avatar_vip", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var brandAssets: UIImage? { return UIImage(named: "Brand Assets", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_button_white_disable: UIImage? { return UIImage(named: "common_button_white_disable", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership: UIImage? { return UIImage(named: "common_icon_membership", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership_expired: UIImage? { return UIImage(named: "common_icon_membership_expired", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership_level1: UIImage? { return UIImage(named: "common_icon_membership_level1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership_level2: UIImage? { return UIImage(named: "common_icon_membership_level2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership_level3: UIImage? { return UIImage(named: "common_icon_membership_level3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership_level4: UIImage? { return UIImage(named: "common_icon_membership_level4", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership_level5: UIImage? { return UIImage(named: "common_icon_membership_level5", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var common_icon_membership_level6: UIImage? { return UIImage(named: "common_icon_membership_level6", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var icon: UIImage? { return UIImage(named: "icon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var icon_os7: UIImage? { return UIImage(named: "icon_os7", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationbar_arrow_down: UIImage? { return UIImage(named: "navigationbar_arrow_down", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationbar_arrow_up: UIImage? { return UIImage(named: "navigationbar_arrow_up", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationbar_friendattention: UIImage? { return UIImage(named: "navigationbar_friendattention", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationbar_friendattention_highlighted: UIImage? { return UIImage(named: "navigationbar_friendattention_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationbar_pop: UIImage? { return UIImage(named: "navigationbar_pop", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationbar_pop_highlighted: UIImage? { return UIImage(named: "navigationbar_pop_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_1: UIImage? { return UIImage(named: "new_feature_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_2: UIImage? { return UIImage(named: "new_feature_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_3: UIImage? { return UIImage(named: "new_feature_3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_4: UIImage? { return UIImage(named: "new_feature_4", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_button: UIImage? { return UIImage(named: "new_feature_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_button_highlighted: UIImage? { return UIImage(named: "new_feature_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_finish_button: UIImage? { return UIImage(named: "new_feature_finish_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_finish_button_highlighted: UIImage? { return UIImage(named: "new_feature_finish_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_share_false: UIImage? { return UIImage(named: "new_feature_share_false", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var new_feature_share_true: UIImage? { return UIImage(named: "new_feature_share_true", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var popover_background: UIImage? { return UIImage(named: "popover_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var popover_background_left: UIImage? { return UIImage(named: "popover_background_left", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var popover_background_right: UIImage? { return UIImage(named: "popover_background_right", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var preview_like_icon: UIImage? { return UIImage(named: "preview_like_icon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var preview_like_icon_disable: UIImage? { return UIImage(named: "preview_like_icon_disable", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var preview_like_icon_highlighted: UIImage? { return UIImage(named: "preview_like_icon_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_border: UIImage? { return UIImage(named: "qrcode_border", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_button_background: UIImage? { return UIImage(named: "qrcode_button_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_embeddedimage_shadow: UIImage? { return UIImage(named: "qrcode_embeddedimage_shadow", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_navigationbar_background: UIImage? { return UIImage(named: "qrcode_navigationbar_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_scanline_barcode: UIImage? { return UIImage(named: "qrcode_scanline_barcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_scanline_qrcode: UIImage? { return UIImage(named: "qrcode_scanline_qrcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_tabbar_background: UIImage? { return UIImage(named: "qrcode_tabbar_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_tabbar_icon_barcode: UIImage? { return UIImage(named: "qrcode_tabbar_icon_barcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_tabbar_icon_barcode_highlighted: UIImage? { return UIImage(named: "qrcode_tabbar_icon_barcode_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_tabbar_icon_qrcode: UIImage? { return UIImage(named: "qrcode_tabbar_icon_qrcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_tabbar_icon_qrcode_highlighted: UIImage? { return UIImage(named: "qrcode_tabbar_icon_qrcode_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var qrcode_tip_background: UIImage? { return UIImage(named: "qrcode_tip_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_background: UIImage? { return UIImage(named: "tabbar_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_background_icon_add: UIImage? { return UIImage(named: "tabbar_compose_background_icon_add", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_background_icon_close: UIImage? { return UIImage(named: "tabbar_compose_background_icon_close", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_background_icon_return: UIImage? { return UIImage(named: "tabbar_compose_background_icon_return", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_below_background: UIImage? { return UIImage(named: "tabbar_compose_below_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_below_button: UIImage? { return UIImage(named: "tabbar_compose_below_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_below_button_highlighted: UIImage? { return UIImage(named: "tabbar_compose_below_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_book: UIImage? { return UIImage(named: "tabbar_compose_book", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_button: UIImage? { return UIImage(named: "tabbar_compose_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_button_highlighted: UIImage? { return UIImage(named: "tabbar_compose_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_camera: UIImage? { return UIImage(named: "tabbar_compose_camera", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_delete: UIImage? { return UIImage(named: "tabbar_compose_delete", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_envelope: UIImage? { return UIImage(named: "tabbar_compose_envelope", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_friend: UIImage? { return UIImage(named: "tabbar_compose_friend", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_icon_add: UIImage? { return UIImage(named: "tabbar_compose_icon_add", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_icon_add_highlighted: UIImage? { return UIImage(named: "tabbar_compose_icon_add_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_idea: UIImage? { return UIImage(named: "tabbar_compose_idea", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_lbs: UIImage? { return UIImage(named: "tabbar_compose_lbs", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_left_button: UIImage? { return UIImage(named: "tabbar_compose_left_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_left_button_highlighted: UIImage? { return UIImage(named: "tabbar_compose_left_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_more: UIImage? { return UIImage(named: "tabbar_compose_more", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_more_mask: UIImage? { return UIImage(named: "tabbar_compose_more_mask", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_music: UIImage? { return UIImage(named: "tabbar_compose_music", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_notloaded: UIImage? { return UIImage(named: "tabbar_compose_notloaded", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_photo: UIImage? { return UIImage(named: "tabbar_compose_photo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_review: UIImage? { return UIImage(named: "tabbar_compose_review", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_right_button: UIImage? { return UIImage(named: "tabbar_compose_right_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_right_button_highlighted: UIImage? { return UIImage(named: "tabbar_compose_right_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_shooting: UIImage? { return UIImage(named: "tabbar_compose_shooting", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_transfer: UIImage? { return UIImage(named: "tabbar_compose_transfer", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_video: UIImage? { return UIImage(named: "tabbar_compose_video", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_voice: UIImage? { return UIImage(named: "tabbar_compose_voice", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_wbcamera: UIImage? { return UIImage(named: "tabbar_compose_wbcamera", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_compose_weibo: UIImage? { return UIImage(named: "tabbar_compose_weibo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_discover: UIImage? { return UIImage(named: "tabbar_discover", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_discover_highlighted: UIImage? { return UIImage(named: "tabbar_discover_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_home: UIImage? { return UIImage(named: "tabbar_home", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_home_highlighted: UIImage? { return UIImage(named: "tabbar_home_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_message_center: UIImage? { return UIImage(named: "tabbar_message_center", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_message_center_highlighted: UIImage? { return UIImage(named: "tabbar_message_center_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_profile: UIImage? { return UIImage(named: "tabbar_profile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tabbar_profile_highlighted: UIImage? { return UIImage(named: "tabbar_profile_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_card_bottom_background: UIImage? { return UIImage(named: "timeline_card_bottom_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_card_bottom_line_highlighted: UIImage? { return UIImage(named: "timeline_card_bottom_line_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_card_middle_background: UIImage? { return UIImage(named: "timeline_card_middle_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_card_middle_background_highlighted: UIImage? { return UIImage(named: "timeline_card_middle_background_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_icon_comment: UIImage? { return UIImage(named: "timeline_icon_comment", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_icon_like: UIImage? { return UIImage(named: "timeline_icon_like", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_icon_retweet: UIImage? { return UIImage(named: "timeline_icon_retweet", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var timeline_icon_unlike: UIImage? { return UIImage(named: "timeline_icon_unlike", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var visitordiscover_feed_image_house: UIImage? { return UIImage(named: "visitordiscover_feed_image_house", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var visitordiscover_feed_image_smallicon: UIImage? { return UIImage(named: "visitordiscover_feed_image_smallicon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var visitordiscover_feed_mask_smallicon: UIImage? { return UIImage(named: "visitordiscover_feed_mask_smallicon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var visitordiscover_image_message: UIImage? { return UIImage(named: "visitordiscover_image_message", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var visitordiscover_image_profile: UIImage? { return UIImage(named: "visitordiscover_image_profile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var visitordiscover_signup_logo: UIImage? { return UIImage(named: "visitordiscover_signup_logo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
  }
  
  struct nib {
    static var visitorView: _R.nib._VisitorView { return _R.nib._VisitorView() }
  }
  
  struct reuseIdentifier {
    static var homeCell: ReuseIdentifier<HomeTableViewCell> { return ReuseIdentifier(identifier: "homeCell") }
    static var newfeatureCell: ReuseIdentifier<SXMNewfeatureCell> { return ReuseIdentifier(identifier: "newfeatureCell") }
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    struct discover {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Discover", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "tabbar_discover") != nil, "[R.swift] Image named 'tabbar_discover' is used in storyboard 'Discover', but couldn't be loaded.")
        assert(UIImage(named: "tabbar_discover_highlighted") != nil, "[R.swift] Image named 'tabbar_discover_highlighted' is used in storyboard 'Discover', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct home {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Home", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "common_icon_membership_level1") != nil, "[R.swift] Image named 'common_icon_membership_level1' is used in storyboard 'Home', but couldn't be loaded.")
        assert(UIImage(named: "tabbar_home") != nil, "[R.swift] Image named 'tabbar_home' is used in storyboard 'Home', but couldn't be loaded.")
        assert(UIImage(named: "tabbar_home_highlighted") != nil, "[R.swift] Image named 'tabbar_home_highlighted' is used in storyboard 'Home', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct main {
      static var initialViewController: MainViewController? { return instance.instantiateInitialViewController() as? MainViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct message {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Message", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "tabbar_message_center") != nil, "[R.swift] Image named 'tabbar_message_center' is used in storyboard 'Message', but couldn't be loaded.")
        assert(UIImage(named: "tabbar_message_center_highlighted") != nil, "[R.swift] Image named 'tabbar_message_center_highlighted' is used in storyboard 'Message', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct newfeature {
      static var initialViewController: NewfeatureViewController? { return instance.instantiateInitialViewController() as? NewfeatureViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Newfeature", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct null {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Null", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct oAuth {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "OAuth", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct popover {
      static var initialViewController: PopoverViewController? { return instance.instantiateInitialViewController() as? PopoverViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Popover", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "popover_background") != nil, "[R.swift] Image named 'popover_background' is used in storyboard 'Popover', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct profile {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Profile", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "tabbar_profile_highlighted") != nil, "[R.swift] Image named 'tabbar_profile_highlighted' is used in storyboard 'Profile', but couldn't be loaded.")
        assert(UIImage(named: "tabbar_profile") != nil, "[R.swift] Image named 'tabbar_profile' is used in storyboard 'Profile', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct qRCode {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "QRCode", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "qrcode_border") != nil, "[R.swift] Image named 'qrcode_border' is used in storyboard 'QRCode', but couldn't be loaded.")
        assert(UIImage(named: "qrcode_tabbar_icon_qrcode") != nil, "[R.swift] Image named 'qrcode_tabbar_icon_qrcode' is used in storyboard 'QRCode', but couldn't be loaded.")
        assert(UIImage(named: "qrcode_tabbar_icon_barcode") != nil, "[R.swift] Image named 'qrcode_tabbar_icon_barcode' is used in storyboard 'QRCode', but couldn't be loaded.")
        assert(UIImage(named: "qrcode_scanline_qrcode") != nil, "[R.swift] Image named 'qrcode_scanline_qrcode' is used in storyboard 'QRCode', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct welcome {
      static var initialViewController: WelcomeViewController? { return instance.instantiateInitialViewController() as? WelcomeViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Welcome", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "avatar_default_big") != nil, "[R.swift] Image named 'avatar_default_big' is used in storyboard 'Welcome', but couldn't be loaded.")
        assert(UIImage(named: "ad_background") != nil, "[R.swift] Image named 'ad_background' is used in storyboard 'Welcome', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "shenming.SXMWeibo") }
  
  struct nib {
    struct _VisitorView: NibResource {
      var instance: UINib { return UINib.init(nibName: "VisitorView", bundle: _R.hostingBundle) }
      var name: String { return "VisitorView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> VisitorView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? VisitorView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}